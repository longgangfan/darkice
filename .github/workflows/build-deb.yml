name: Build Debian packages (bookworm + trixie, armhf/arm64)

on:
  push:
    branches: [ master, main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch: {}
  release:
    types: [ published ]

# GITHUB_TOKEN permissions required for creating releases and uploading assets
permissions:
  contents: write

jobs:
  build-deb:
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        distro: [ bookworm, trixie ]
        arch:   [ armhf, arm64 ]
    env:
      DEB_BUILD_OPTIONS: nocheck
    container:
      image: debian:${{ matrix.distro }}
    steps:
      - name: Setup APT (${{ matrix.distro }} cross for ${{ matrix.arch }})
        run: |
          set -eux
          if [ "${{ matrix.arch }}" = "armhf" ]; then ARCH=armhf; TRIPLET=arm-linux-gnueabihf; else ARCH=arm64; TRIPLET=aarch64-linux-gnu; fi
          dpkg --add-architecture "$ARCH"
          apt-get update
          DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
            ca-certificates git rsync sed \
            build-essential autoconf automake libtool pkg-config \
            devscripts debhelper \
            crossbuild-essential-${{ matrix.arch }} \
            libogg-dev:$ARCH libvorbis-dev:$ARCH libflac-dev:$ARCH \
            libasound2-dev:$ARCH libpulse-dev:$ARCH libjack-dev:$ARCH libsamplerate0-dev:$ARCH \
            # runtime libs so dpkg-shlibdeps can resolve NEEDED sonames for target arch
            libc6:$ARCH libgcc-s1:$ARCH libstdc++6:$ARCH zlib1g:$ARCH \
            libogg0:$ARCH libvorbis0a:$ARCH libvorbisenc2:$ARCH libflac12:$ARCH \
            libasound2:$ARCH libpulse0:$ARCH libpulse-simple0:$ARCH libjack-jackd2-0:$ARCH libsamplerate0:$ARCH

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute version from tag or release (encode distro in debian revision)
        env:
          DEBFULLNAME: CI Builder
          DEBEMAIL: ci@example.com
        run: |
          set -eu
          RAW=""
          if [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then
            RAW="${GITHUB_REF_NAME}"
          elif [ "${{ github.event_name }}" = "release" ]; then
            RAW="${{ github.event.release.tag_name }}"
          else
            RAW="$(git describe --tags --abbrev=0 2>/dev/null || true)"
            if [ -z "$RAW" ]; then RAW="0.0.0"; fi
          fi
          UPSTREAM="${RAW#v}"
          if [ -z "$UPSTREAM" ]; then UPSTREAM="0.0.0"; fi
          UPSTREAM_SANITIZED="$(printf '%s' "$UPSTREAM" | sed 's/-/~/g')"
          DISTRO="${{ matrix.distro }}"
          BASE_REV="1"
          DEB_REVISION="${BASE_REV}~${DISTRO}1"
          echo "VERSION_UPSTREAM=$UPSTREAM_SANITIZED" >> "$GITHUB_ENV"
          echo "DEB_REVISION=$DEB_REVISION" >> "$GITHUB_ENV"
          echo "VERSION=${UPSTREAM_SANITIZED}-${DEB_REVISION}" >> "$GITHUB_ENV"

      - name: Write changelog version
        working-directory: darkice/trunk
        env:
          DEBFULLNAME: CI Builder
          DEBEMAIL: ci@example.com
        run: |
          set -eu
          dch -v "${VERSION_UPSTREAM}-${DEB_REVISION}" -D "${{ matrix.distro }}" -m "CI build for ${{ matrix.distro }} from ${GITHUB_REF_NAME}" --force-distribution -b

      - name: Build Debian package (cross, ${{ matrix.distro }}-${{ matrix.arch }})
        working-directory: darkice/trunk
        run: |
          set -eu
          if [ "${{ matrix.arch }}" = "armhf" ]; then \
            export CC=arm-linux-gnueabihf-gcc; \
            export CXX=arm-linux-gnueabihf-g++; \
            export PKG_CONFIG_LIBDIR=/usr/lib/arm-linux-gnueabihf/pkgconfig:/usr/share/pkgconfig; \
          else \
            export CC=aarch64-linux-gnu-gcc; \
            export CXX=aarch64-linux-gnu-g++; \
            export PKG_CONFIG_LIBDIR=/usr/lib/aarch64-linux-gnu/pkgconfig:/usr/share/pkgconfig; \
          fi; \
          dpkg-buildpackage -us -uc -b -d -a${{ matrix.arch }}

      - name: Collect artifacts (workdir)
        working-directory: darkice/trunk
        run: |
          set -eu
          mkdir -p out/${{ matrix.distro }}-${{ matrix.arch }}
          mv ./*.deb out/${{ matrix.distro }}-${{ matrix.arch }}/ || true
          mv ./*.changes out/${{ matrix.distro }}-${{ matrix.arch }}/ || true
          mv ./*.buildinfo out/${{ matrix.distro }}-${{ matrix.arch }}/ || true

      - name: Collect artifacts (parent)
        working-directory: darkice/trunk
        run: |
          set -eu
          mkdir -p out/${{ matrix.distro }}-${{ matrix.arch }}
          mv ../*.deb out/${{ matrix.distro }}-${{ matrix.arch }}/ || true
          mv ../*.changes out/${{ matrix.distro }}-${{ matrix.arch }}/ || true
          mv ../*.buildinfo out/${{ matrix.distro }}-${{ matrix.arch }}/ || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: darkice-deb-${{ matrix.distro }}-${{ matrix.arch }}-${{ github.ref_name }}
          path: darkice/trunk/out/${{ matrix.distro }}-${{ matrix.arch }}/*

  publish:
    name: Publish consolidated release assets
    needs: build-deb
    if: ${{ (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'release' && startsWith(github.event.release.tag_name, 'v')) }}
    runs-on: ubuntu-latest
    steps:
      - name: Derive tag name
        id: tag
        run: |
          if [ "${GITHUB_REF_TYPE:-}" = "tag" ]; then
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          elif [ "${{ github.event_name }}" = "release" ]; then
            echo "tag=${{ github.event.release.tag_name }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release
          merge-multiple: true
      - name: List downloaded artifacts
        run: |
          echo "Artifacts in release/:" && find release -type f -maxdepth 2 -print
      - name: Remove dbgsym packages (not needed in release)
        run: |
          find release -type f -name "*dbgsym*.deb" -print -delete || true
      - name: Upload to GitHub Release (idempotent)
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.tag.outputs.tag }}
          allowUpdates: true
          replacesArtifacts: true
          artifactErrorsFailBuild: true
          artifacts: release/*
